<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,minimum-scale=1,user-scalable=no"/>
    <title>WowWin</title>
    <%= javascript_include_tag "jquery", "/js/moment.min.js" %>
    <%= csrf_meta_tags %>
    <script type="text/javascript">
      window.abi = [
  {
    "constant": true,
    "inputs": [],
    "name": "potSplit",
    "outputs": [
      {
        "name": "allBonus",
        "type": "uint256"
      },
      {
        "name": "affiliateBonus",
        "type": "uint256"
      },
      {
        "name": "bigPot",
        "type": "uint256"
      },
      {
        "name": "initialTeams",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "activate",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "name": "pIDxAddr_",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "affId",
        "type": "uint256"
      }
    ],
    "name": "buyByAff",
    "outputs": [],
    "payable": true,
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "round_",
    "outputs": [
      {
        "name": "luckyPlayers",
        "type": "uint256"
      },
      {
        "name": "plyr",
        "type": "uint256"
      },
      {
        "name": "end",
        "type": "uint256"
      },
      {
        "name": "ended",
        "type": "bool"
      },
      {
        "name": "strt",
        "type": "uint256"
      },
      {
        "name": "keys",
        "type": "uint256"
      },
      {
        "name": "eth",
        "type": "uint256"
      },
      {
        "name": "pot",
        "type": "uint256"
      },
      {
        "name": "mask",
        "type": "uint256"
      },
      {
        "name": "bonusPot",
        "type": "uint256"
      },
      {
        "name": "buyTimes",
        "type": "uint256"
      },
      {
        "name": "currentKeyPrice",
        "type": "uint256"
      },
      {
        "name": "lastBuyAt",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "teamNum",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "withdraw",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "plyBuyTimes",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "calcAllProfits",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "maxLucyNumber",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "rID_",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "maxAffDepth",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "getCurrentRoundInfo",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      },
      {
        "name": "",
        "type": "uint256"
      },
      {
        "name": "",
        "type": "uint256"
      },
      {
        "name": "",
        "type": "uint256"
      },
      {
        "name": "",
        "type": "uint256"
      },
      {
        "name": "",
        "type": "uint256"
      },
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "divisionNumer",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_rID",
        "type": "uint256"
      }
    ],
    "name": "isRoundRunning",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "withdrawAll",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "initKeyPrice",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      },
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "plyrRnds_",
    "outputs": [
      {
        "name": "eth",
        "type": "uint256"
      },
      {
        "name": "keys",
        "type": "uint256"
      },
      {
        "name": "win",
        "type": "uint256"
      },
      {
        "name": "staticWin",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "buy",
    "outputs": [],
    "payable": true,
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "roundKeyPrices",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_rID",
        "type": "uint256"
      }
    ],
    "name": "forceEndRound",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_rID",
        "type": "uint256"
      },
      {
        "name": "_pID",
        "type": "uint256"
      }
    ],
    "name": "staticProfitForPID",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_rID",
        "type": "uint256"
      }
    ],
    "name": "leftTime",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "activated_",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "plyr_",
    "outputs": [
      {
        "name": "addr",
        "type": "address"
      },
      {
        "name": "gen",
        "type": "uint256"
      },
      {
        "name": "staticWin",
        "type": "uint256"
      },
      {
        "name": "win",
        "type": "uint256"
      },
      {
        "name": "withdraw",
        "type": "uint256"
      },
      {
        "name": "aff",
        "type": "uint256"
      },
      {
        "name": "lrnd",
        "type": "uint256"
      },
      {
        "name": "laff",
        "type": "uint256"
      },
      {
        "name": "subPlys",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "affId",
        "type": "uint256"
      }
    ],
    "name": "register",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": true,
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      },
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "buyRecordsPlys_",
    "outputs": [
      {
        "name": "buyerPID",
        "type": "uint256"
      },
      {
        "name": "buyerEthIn",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      },
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "buyHistoryPlyer_",
    "outputs": [
      {
        "name": "buyTimeNum",
        "type": "uint256"
      },
      {
        "name": "ethOut",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "payable": true,
    "stateMutability": "payable",
    "type": "fallback"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "playerID",
        "type": "uint256"
      },
      {
        "indexed": true,
        "name": "playerAddress",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "isNewPlayer",
        "type": "bool"
      },
      {
        "indexed": false,
        "name": "affiliateID",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "affiliateAddress",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "amountPaid",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "timeStamp",
        "type": "uint256"
      }
    ],
    "name": "onNewPlayer",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": false,
        "name": "buyerID",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "buyerAddress",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "buyerEthIn",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "currentKeyPrice",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "nextKeyPrice",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "keysAmount",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "laffID",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "timeStamp",
        "type": "uint256"
      }
    ],
    "name": "onBuyKeyEnd",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "playerID",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "playerAddress",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "ethOut",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "timeStamp",
        "type": "uint256"
      }
    ],
    "name": "onWithdraw",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": false,
        "name": "lastBuyer",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "rID",
        "type": "uint256"
      },
      {
        "indexed": false,
        "name": "timeStamp",
        "type": "uint256"
      }
    ],
    "name": "onEndRound",
    "type": "event"
  }
];
  </script>
    <style>
    body{
      margin: 0;
      padding: 0;
    }
    .wrap{
      /*width: 375px;*/
      /*height: 1635px;*/
      width: 100%;
      margin: 0 auto;
      background-image: linear-gradient(-225deg, #41246B 0%, #4159BB 100%);
      box-shadow: 0px 2px 4px 0px rgba(65,89,187,0.44);
    }
    .yuan{
      width: 375px;
      margin: 0 auto;
      height: 363px;
      background: url("/images/ban.png") no-repeat 8px 0;
      padding-top: 180px;
      position: relative;
      box-sizing: border-box;
    }
    .num{
      width: 100%;
      height: 36px;
      color: #0f3c5f;
      font-family: Futura;
      font-size: 28px;
      font-weight: 400;
      line-height: 36px;
      text-align: center;
    }
    .zi{
      width:100%;
      height: 17px;
      color: #467599;
      font-family: PingFangSC;
      font-size: 13px;
      font-weight: 500;
      line-height: 17px;
      text-align: center;
    }
    .eth{
      width: 44px;
      height: 44px;
      background: url("/images/eth.png") no-repeat ;
      position: absolute;
      top:150px;
      left: 50%;
      margin-left: -22px;
      margin-top: -22px;
    }
    .jx{
      width: 335px;
      height: 332px;
      background: #fff;
      /*background-image: linear-gradient(-180deg, #F6F6FF 0%, #EBEBFF 97%);*/
      border-radius: 16px;
      margin: -25px  auto 0;
      z-index: 1;
      padding-top: 20px;
      box-sizing: border-box;
      position: relative;
    }
    .tit{
      width: 100%;
      height: 24px;
      line-height: 24px;
      font-family: PingFangSC-Medium;
      font-size: 17px;
      color: #467599;
      text-align: center;
    }
    .time{
      width: 100%;
      margin-top: 14px;
      overflow: hidden;
      padding-left: 42px;
      box-sizing: border-box;
    }
    .fl{
      float: left;
    }
    .h{
      width: 24px;
      height: 42px;
      background: rgba(32,32,108,0.05) ;
      border-radius: 3px;
      margin-left: 2px;
      line-height: 42px;
      nt-family: Futura-CondensedMedium;
      font-size: 22px;
      color: #0F3C5F;
      text-align: center;
      float: left;
    }
    .m{
      width: 18px;
      height: 42px;
      font-size: 18px;
      color: #467599;
      line-height: 42px;
      text-align: left;
      margin-left: 4px;
      background: #fff;
      opacity: 0.48;
      float: left;
    }
    .bot{
      font-family: PingFangSC-Medium;
      font-size: 10px;
      color: #8CAAC8;
      text-align: center;
    }
    .line{
      width: 100%;
      height: 1px;
      background: rgba(20,40,60,0.08);
      margin-top: 18px;
    }
    .key{
      margin-top: 20px;
      overflow: hidden;
    }
    .lef{
      float: left;
      width: 204px;
      height: 52px;
      background: rgba(0,162,255,0.12);
      border-radius: 5px;
      margin-left: 24px;
    }
    .key1{
      width: 63px;
      height: 29px;
      background: url("/images/key.png") no-repeat center;
      margin: 12px 24px 0 15px;
      float: left;
    }
    .key2{
      float: right;
      margin-right: 15px;
    }
    .dq{
      font-family: PingFangSC-Medium;
      font-size: 11px;
      color: #8CAAC8;
      text-align: right;
      margin-top: 9px;
      line-height: 16px;
    }
    .mei{
      font-family: PingFangSC-Medium;
      font-size: 9px;
      color: #467599;
      text-align: right;
      line-height: 18px;
    }
    .rig{
      width: 80px;
      height: 52px;
      float: left;
      opacity: 0.44;
      background: #C9DDFC;
      border: 0 solid #00A2FF;
      border-radius: 5px;
      margin-left: 3px;
      border: inset 0.5px #00A2FF;
    }
    .tg{
      width: 100%;
      height: 21px;
      line-height: 21px;
      margin-top: 12px;
      font-family: PingFangSC-Medium;
      font-size: 15px;
      color: #00A2FF;
      text-align: center;
    }
    .zd{
      width: 100%;
      height: 16px;
      line-height: 16px;
      font-family: PingFangSC-Medium;
      font-size: 11px;
      color: #8CAAC8;
      text-align: center;
    }
    .ts{
      width: 287px;
      height: 32px;
      line-height: 16px;
      font-family: PingFangSC-Medium;
      font-size: 11px;
      color: #8CAAC8;
      margin: 6px auto 10px;
    }
    .zf{
      width: 287px;
      height: 48px;
      background: #00A2FF;
      border-radius: 5px;
      font-family: PingFangSC-Semibold;
      font-size: 17px;
      color: #FFFFFF;
      text-align: center;
      line-height: 48px;
      margin: 0 auto;
    }
    .se{
      width: 335px;
      height: 340px;
      background: #EBEBFF;
      border-radius: 16px;
      margin: 6px auto;
      padding-left: 26px;
      padding-top: 26px;
      box-sizing: border-box;
    }
    .lj{
      width: 287px;
      height: 56px;
      overflow: hidden;
    }
    .ljl{
      float: left;
      width: 150px;
    }
    .lj1{
      width: 100%;
      height: 16px;
      font-family: PingFangSC-Medium;
      font-size: 11px;
      color: #8CAAC8;
      line-height: 16px;
      text-align: left;
    }
    .lj2{
      width: 100%;
      height: 35px;
      line-height: 35px;
      text-align: left;
      font-family: Futura-CondensedMedium;
      font-size: 28px;
      color: #0F3C5F;
      margin-top: 5px;
    }
    .see{
      width: 24px;
      height: 24px;
      float: right;
      background: url("/images/eyes-K.png") no-repeat;
    }
    .items{
      width: 287px;
      margin-top: 20px;
    }
    .item{
      width: 100%;
      height: 21px;
      overflow: hidden;
      margin-top: 14px;
    }
    .itl{
      font-family: PingFangSC-Medium;
      font-size: 15px;
      color: #467599;
      text-align: left;
      line-height: 21px;
      float: left;
      margin-right: 23px;
      font-weight: 500;
    }
    .itr{
      font-family: Futura-CondensedMedium;
      font-size: 16px;
      color: #0F3C5F;
      line-height: 21px;
      float: left;
    }
    .tb{
      width: 287px;
      height: 48px;
      background: #00A2FF;
      border-radius: 5px;
      font-family: PingFangSC-Semibold;
      font-size: 17px;
      color: #FFFFFF;
      text-align: center;
      line-height: 48px;
      margin-top: 20px;
    }
    .fs{
      width: 337px;
      line-height: 18px;
      font-family: PingFangSC-Medium;
      font-size: 13px;
      color: #FFFFFF;
      text-align: center;
      margin: 14px auto;
    }
    .end{
      font-family: PingFangSC-Medium;
      font-size: 10px;
      color: #FFFFFF;
      letter-spacing: 0;
      text-align: center;
      margin: 0 auto;
    }
  </style>
</head>
<body>
<div class="wrap">
  <div class="yuan">
    <div class="eth"></div>
    <div class="num" id="totalRewardPot">0</div>
    <div class="zi">奖池ETH数量</div>
  </div>
  <div class="jx">
    <div class="tit" id="title">距离第<span id="roundID">1</span>轮结束还剩</div>
    <div class="time">
      <div class="fl day">
        <div class="h" id="day">0</div>
        <div class="bot">Day</div>
      </div>
      <div class="m" id="hour">:</div>
      <div class="fl hour">
        <div class="h" id="hour_1">0</div>
        <div class="h" id="hour_2">0</div>
        <div class="bot">Hours</div>
      </div>
      <div class="m">:</div>
      <div class="fl hour" id="minute">
        <div class="h" id="minute_1">0</div>
        <div class="h" id="minute_2">0</div>
        <div class="bot">Minutes</div>
      </div>
      <div class="m">:</div>
      <div class="fl hour" id="second">
        <div class="h" id="second_1">0</div>
        <div class="h" id="second_2">0</div>
        <div class="bot">Seronds</div>

      </div>
    </div>
    <div class="line"></div>
    <div class="key">
      <div class="lef">
        <div class="key1"></div>
        <div class="key2">
          <div class="dq">当前KEY价</div>
          <div class="mei"><span class="keyPrice">0</span>ETH/枚</div>
        </div>
      </div>
      <div class="rig">
        <div class="tg">托管</div>
        <div class="zd">自动抢KEY</div>
      </div>
    </div>
    <div class="ts">友情提示：应市场需求，保证winner生态平衡，每次抢购的KEY单价会持续增长</div>
    <div class="zf" id="buy">支付<span class="keyPrice">0</span>ETH</div>
  </div>
  <div class="se">
    <div class="lj">
      <div class="ljl">
        <div class="lj1">累计收益</div>
        <div class="lj2"><span id="totalProfit" class="get2">0</span> ETH</div>
      </div>
      <div class="see" id="see"></div>
    </div>
    <div class="line"></div>
    <div class="items">
      <div class="item">
        <div class="itl">持有KEY</div>
        <div class="itr"><span class="get" id="totalKey">0</span> KEY</div>
      </div>
      <div class="item">
        <div class="itl">累积投入</div>
        <div class="itr"><span class="get" id="totalEthOut">0</span> ETH</div>
      </div>
      <div class="item">
        <div class="itl">获得分红</div>
        <div class="itr"><span class="get" id="totalShare">0</span> ETH</div>
      </div>
      <div class="item">
        <div class="itl">分享收益</div>
        <div class="itr"><span class="get" id="totalAffProfit">0</span> ETH</div>
      </div>
    </div>
    <div class="tb" id="withdraw">提币</div>
  </div>
  <div class="fs">
    发送专属推广链接给好友，好友通过你的专属推广链接打开并参与游戏成功，则终身锁定推荐关系，你的朋友每次参与，你将获得10%的经销商收益
  </div>
  <div class="end">2018 WOW Winner.All Rights Reseeved</div>
</div>

</body>
<script>
  var showProfits = true;
  // var address = "0x9c3abc1382536c7c3fc4d390377d2ea5493c80d4",
  var address = "0xb430f3821ffdd078da2aea6afb5a04e8518bea0d",
      GameContract = web3.eth.contract(abi),
      Game = GameContract.at(address),
      KeyPrice = 0,
      affId = 0,
      pID = 0,
      defaultBuyGas = 1000000,
      defaultGasPrice = 3000000000,
      currentPlayerAddress = 0;
  
  var code = location.href.split("code=")[1];
  if (code != undefined) {
    affId = parseInt(code);
  }
  
  function save(res, buy_type, pid) {
    kp = KeyPrice.toString();
    data =  {
      authenticity_token: $("meta[name='csrf-token']").attr("content"),
      tx_hash: res,
      player_id: pid.toString(),
      tran_type: buy_type,
      key_price: kp
    }
    $.ajax({
      url: "/buy",
      type: "POST",
      data: data,
      success: function(res) {
        if (res === "OK") {
          alert("Buy OK");
        }
      }
    });
  }

  function log(res) {
    // console.info(res);
  }
  
  function freshUI() {
     Game.rID_.call(function(error, roundId){
      log("ROUNDID: " + roundId);
      if (error) {
        return;
      }
      $("#roundID").html(roundId + "")

      Game.round_.call(roundId,function(error, roundInfo){
        log("ROUND_INFO: " + roundInfo);

        if (roundInfo[4] == 0) {
          $("#title").html("游戏未开始");
          return;
        } 
        $("#totalRewardPot").html((roundInfo[7] / 10 ** 18).toFixed(6));

        KeyPrice = roundInfo[11];
        $(".keyPrice").html((KeyPrice / 10 ** 18).toFixed(6));
        
        if (showProfits) {
          Game.pIDxAddr_.call(web3.eth.coinbase,function(error, pID_){
            log("pID: " + pID_);
            pID = pID_;
            if (pID == 0) {
              return;
            }
            Game.plyr_.call(pID,function(error, plyr_){
              log("plyr_");
              log(plyr_);
              var totalProfit = ((plyr_[1] / 1 + plyr_[2] / 1 + plyr_[3] / 1 + plyr_[5] / 1 - plyr_[4] / 1) / (10 ** 18)).toFixed(6);
              $("#totalProfit").html(totalProfit); 
              $("#totalAffProfit").html((plyr_[5] / 10 ** 18).toFixed(6));
              $("#totalShare").html((plyr_[1] / 10 ** 18).toFixed(6));
            })

            Game.plyrRnds_.call(pID, roundId, function(error, plyrRnds_) {
              log("plyrRnds_");
              log(plyrRnds_);
              $("#totalEthOut").html((plyrRnds_[0] / 10 ** 18).toFixed(10));
              $("#totalKey").html(plyrRnds_[1] / 1);
            })
          })
        }

        var end = roundInfo[2];
        var now = parseInt(Date.now()/ 1000),
            leftTime = end - now;

        // Game.leftTime.call(roundId,function(error, leftTime){
          // log("LEFT_TIME: " + leftTime);

          var seconds = leftTime,
              leftDays = parseInt(seconds / (3600 * 24)),
              leftHours = parseInt((seconds - leftDays * 3600 * 24) / 3600),
              leftMinutes = parseInt((seconds - leftDays * 3600 * 24 - leftHours * 3600) / 60),
              leftSeconds = parseInt((seconds - leftDays * 3600 * 24 - leftHours * 3600 - leftMinutes * 60));

          if (seconds > 0) {
            $("#day").html(leftDays);
            if (leftHours > 9) {
              $("#hour_1").html(parseInt(leftHours / 10));
              $("#hour_2").html(leftHours - parseInt(leftHours / 10) * 10);
            } else {
              $("#hour_1").html("0");
              $("#hour_2").html(leftHours);
            }
            if (leftMinutes > 9) {
              $("#minute_1").html(parseInt(leftMinutes / 10));
              $("#minute_2").html( leftMinutes - parseInt(leftMinutes / 10) * 10);
            } else {
              $("#minute_1").html("0");
              $("#minute_2").html(leftMinutes);
            }
            if (leftSeconds > 9) {
              $("#second_1").html(parseInt(leftSeconds / 10));
              $("#second_2").html( leftSeconds - parseInt(leftSeconds / 10) * 10);
            } else {
              $("#second_1").html("0");
              $("#second_2").html(leftSeconds);
            }
          } else {
            if (true) {
              $("#title").html("游戏已结束");
            }
          }
        // });
      });
    });
  }

  $(document).ready(function(){
    // alert(web3.eth.coinbase)
    setInterval(freshUI, 1000);

    $("#see").click(function(){
      if(showProfits) {
        showProfits = false;
        $(".get").html("********")
        $(".get2").html("********")
        document.getElementsByClassName("see")[0].style.background="url('/images/eyes-B.png') no-repeat";
      } else {
        showProfits = true
        freshUI();
        // $(".get").html("0")
        // $(".get2").html("0")
        document.getElementsByClassName("see")[0].style.background="url('/images/eyes-K.png') no-repeat";
      }
    })

    window.addEventListener('load', function() {
      if (!window.web3) {
        window.alert('Please install MetaMask first.');
        return;
      }
      if (typeof web3 !== 'undefined') {
          // web3.personal.sign(web3.fromUtf8("Please select your address to start"), web3.eth.coinbase, console.log);
      }
      if (!web3.eth.coinbase) {
        // window.alert('Please activate MetaMask first.');
        return;
      } else {
        freshUI();
      }
    });
    
    freshUI()

    var events = Game.allEvents(["lastest"], function(error, res){
      if (!error){
        var args = res.args;
        log(res);
        if (res.event === "onBuyKeyEnd") {
          KeyPrice = args.nextKeyPrice;
          currentPlayerAddress = args.buyerAddress;
          if (currentPlayerAddress == web3.eth.coinbase) {
            pID = args.buyerID;
            $("#totalEthOut").html( parseFloat($("#totalEthOut").html())  + args.buyerEthIn / 10 ** 18 );
            $("#totalKey").html( parseInt($("#totalKey").html()) + 1 );
          }
        }
        freshUI();
        save(res.transactionHash,"onBuyKeyEnd",args.buyerID);
      }
    });

    buyParams  = {
      from: web3.eth.coinbase,
      to: address,
      data: "0xa6f2ae3a"
    }

    $("#buy").click(function(){
      if (KeyPrice > 0) {
        buyKey();   
      } else {
        alert("游戏未开始")
      }
    })

    $("#withdraw").click(function() {
      withdraw();
    })
  })
    
  function withdraw() {
    withdrawParams  = {
      from: web3.eth.coinbase,
      to: address,
      data: "0x853828b6"
    }
    web3.eth.estimateGas(buyParams, function(err, _gasLimit){
      if (_gasLimit == undefined) _gasLimit = defaultBuyGas;
      web3.eth.getGasPrice(function(err, _gasPrice){
        log("GAS: " + _gasLimit, "GASPRICE: " + _gasPrice);
        Game.withdrawAll(function(err, result){
           log("提现Hash: " + result);
        });
      });
    })
  }
  function buyKey() {
    if (pID == 0 && affId == 0) {
      alert("您没有注册该游戏");
      return;
    }
    if (pID == 0) {
      buyParams.data = "0x1b11c111<%= @aff_data %>";
    }
    buyParams.value = KeyPrice;
    web3.eth.estimateGas(buyParams, function(err, _gasLimit){
      if (_gasLimit == undefined) _gasLimit = defaultBuyGas;
      web3.eth.getGasPrice(function(err, _gasPrice){
        log("GAS: " + _gasLimit, "GASPRICE: " + _gasPrice);
        if (pID == 0) {
          Game.buyByAff(affId, {value: KeyPrice, gas: _gasLimit, gasPrice: _gasPrice}, function(err, result){
             save(result, "buyByAff", pID);
          }); 
        } else {
          Game.buy({value: KeyPrice, gas: _gasLimit, gasPrice: _gasPrice}, function(err, result){
             save(result, "buy", pID);
          }); 
        }
      });
    })
  }

</script>
</html>
